{"version":3,"sources":["ColorModeSwitcher.jsx","data/todosData.js","components/AddTodo.jsx","components/TodoItem.jsx","components/TodoLists.jsx","App.jsx","index.jsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","todos","userId","id","title","completed","AddTodo","inputValue","handleTodoInput","handleNewTodo","newTodo","borderWidth","borderStyle","borderColor","placeholder","value","onChange","event","target","ml","colorScheme","sm","md","xl","TodoItem","todo","handleTaskDone","handleDeleteTodo","d","justifyContent","p","borderRadius","backgroundColor","flexDir","alignItems","mr","e","_hover","background","style","TodoLists","todoItems","spacing","w","map","App","useState","setTodoItems","setNewTodo","theme","minH","maxW","mx","my","px","alignSelf","mt","inputVal","newItem","todosUpdate","length","todoId","console","log","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f3f1a42.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","export const todos = [\n  {\n    userId: 1,\n    id: 1,\n    title: 'delectus aut autem',\n    completed: false,\n  },\n  {\n    userId: 1,\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n  },\n  {\n    userId: 1,\n    id: 3,\n    title: 'fugiat veniam minus',\n    completed: false,\n  },\n];\n","import { Input, Button } from '@chakra-ui/react';\n\nconst AddTodo = ({ inputValue, handleTodoInput, handleNewTodo, newTodo }) => {\n  return (\n    <>\n      <Input\n        id=\"input-todo\"\n        borderWidth=\"2px\"\n        borderStyle=\"solid\"\n        borderColor=\"blue.100\"\n        variant=\"filled\"\n        placeholder=\"Add new todo...\"\n        value={inputValue}\n        onChange={event => handleTodoInput(event.target.value)}\n      />\n      <Button\n        ml={4}\n        colorScheme=\"blue\"\n        fontSize={{\n          sm: 'sm',\n          md: 'md',\n          xl: 'lg',\n        }}\n        onClick={() => handleNewTodo(newTodo)}\n      >\n        Add Todo\n      </Button>\n    </>\n  );\n};\nexport default AddTodo;\n","import { FaTrash, FaRegEdit } from 'react-icons/fa';\nimport { Text, Box, Checkbox, Button } from '@chakra-ui/react';\n\nconst TodoItem = ({ todo, handleTaskDone, handleDeleteTodo }) => {\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        p={3}\n        borderRadius=\"5px\"\n        backgroundColor={todo.completed ? 'green.100' : 'blackAlpha.100'}\n        color={todo.completed ? 'blackAlpha.900' : 'white.900'}\n      >\n        <Box d=\"flex\" flexDir=\"row\" alignItems=\"center\" justifyContent=\"center\">\n          <Checkbox\n            mr={5}\n            borderColor=\"gray.500\"\n            onChange={e => handleTaskDone(todo.id)}\n          ></Checkbox>\n          <Text>\n            <span>{todo.title}</span>\n          </Text>\n        </Box>\n\n        <Box>\n          <Button\n            backgroundColor=\"blue.500\"\n            _hover={{\n              background: 'blue.700',\n            }}\n          >\n            <FaRegEdit style={{ color: 'white', fontSize: '15px' }} />\n          </Button>\n          <Button\n            ml={2}\n            backgroundColor=\"red.500\"\n            _hover={{\n              background: 'red.700',\n            }}\n            onClick={() => handleDeleteTodo(todo.id)}\n          >\n            <FaTrash style={{ color: 'white', fontSize: '15px' }} />\n          </Button>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default TodoItem;\n","import { List, ListItem } from '@chakra-ui/react';\nimport TodoItem from './TodoItem';\n\nconst TodoLists = ({ todoItems, handleTaskDone, handleDeleteTodo }) => {\n  return (\n    <>\n      <List spacing={3} w=\"100%\">\n        {todoItems.map(todo => {\n          // Pengen dibuat kalau checklist nanti box list nya warna hijau\n          return (\n            <ListItem key={todo.id}>\n              <TodoItem\n                todo={todo}\n                handleTaskDone={handleTaskDone}\n                handleDeleteTodo={handleDeleteTodo}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </>\n  );\n};\n\nexport default TodoLists;\n","import React, { useState } from 'react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { todos } from './data/todosData';\nimport AddTodo from './components/AddTodo';\nimport TodoLists from './components/TodoLists';\nimport { ChakraProvider, Box, Flex, theme } from '@chakra-ui/react';\n\nfunction App() {\n  const [todoItems, setTodoItems] = useState(todos);\n  const [newTodo, setNewTodo] = useState('');\n\n  const handleTodoInput = inputVal => {\n    setNewTodo(inputVal);\n  };\n\n  const handleNewTodo = newItem => {\n    if (newItem !== '') {\n      const id = todoItems.length + 1;\n      const todo = {\n        userId: 1,\n        id: id,\n        title: newItem,\n        completed: false,\n      };\n\n      const todosUpdate = [todo, ...todoItems];\n      setTodoItems(todosUpdate);\n\n      setNewTodo('');\n    }\n  };\n\n  const handleTaskDone = todoId => {\n    const todosUpdate = todoItems.map(todo => {\n      if (todo.id === todoId) {\n        todo.completed = !todo.completed;\n      }\n\n      return todo;\n    });\n    setTodoItems(todosUpdate);\n    console.log(todoItems);\n  };\n\n  const handleDeleteTodo = todoId => {\n    const todosUpdate = todoItems.filter(todo => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n    });\n    setTodoItems(todosUpdate);\n    console.log(todosUpdate);\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        minH=\"90vh\"\n        maxW=\"80vw\"\n        mx={'auto'}\n        my={10}\n        px={{\n          md: 50,\n          xl: 300,\n        }}\n      >\n        <Box alignSelf=\"flex-end\">\n          <ColorModeSwitcher />\n        </Box>\n        <Box mt={10}>\n          <Flex>\n            <AddTodo\n              inputValue={newTodo}\n              handleTodoInput={handleTodoInput}\n              handleNewTodo={handleNewTodo}\n              newTodo={newTodo}\n            />\n          </Flex>\n          <Flex\n            mt={5}\n            p={3}\n            borderWidth=\"2px\"\n            borderStyle=\"solid\"\n            borderRadius=\"5px\"\n            borderColor=\"gray.100\"\n          >\n            <TodoLists\n              todoItems={todoItems}\n              handleTaskDone={handleTaskDone}\n              handleDeleteTodo={handleDeleteTodo}\n            />\n          </Flex>\n        </Box>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}